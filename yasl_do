#!yasl //recupere les arguments du programme

(1 == ? exit) //Si il n'y a pas d'argument, on quitte

(!) //On supprime argc et le nom du programme


//On stock dans 1 les chiffres et dans 2 l'operateur
(=:1 0:1 1:-:1 !)
(=:2 !)
(=:1 0:1 1:-:1 !)

//Sur chaque ligne, on ajoute un l'operateur que l'on veut tester
//Puis on compare les deux chaines de charactere sans les supprimer
//de la stack 2. Le resultat de la comparaison est stocke dans la stack 5.
//En fonction du resultat de la comparaison, on associe a la stack 5 le 
//nom de la fonction a effectuer.
("+":2 2:%==:5 5:? "add":5 2:!)
("-":2 2:%==:5 5:? "sub":5 2:!)
("*":2 2:%==:5 5:? "mul":5 2:!)
("/":2 2:%==:5 5:? "div":5 2:!)
("%":2 2:%==:5 5:? "mod":5 2:!)
(">":2 2:%==:5 5:? "sup":5 2:!)
("<":2 2:%==:5 5:? "inf":5 2:!)
(">=":2 2:%==:5 5:? "seg":5 2:!)
("<=":2 2:%==:5 5:? "ieg":5 2:!)
("==":2 2:%==:5 5:? "ega":5 2:!)
("!=":2 2:%==:5 5:? "dif":5 2:!)


//Dans chaque fonction, on effectue le calcul avec les deux chiffres contenue
//dans la stack 1 et le resultat est stocke dans la stack 3
{1:+:3} add
{1:-:3} sub
{1:*:3} mul
{1:/:3} div
{1:%:3} mod
{1:>:3} sup
{1:<:3} inf
{1:>=:3} seg
{1:<=:3} ieg
{1:==:3} ega
{1:!=:3} dif

//Avec eval on execute la fonction dans 5
5:eval

//On affiche le resultat
3:print